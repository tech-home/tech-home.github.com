<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Android | Tech Home Blog]]></title>
  <link href="http://tech-home.github.io/blog/categories/android/atom.xml" rel="self"/>
  <link href="http://tech-home.github.io/"/>
  <updated>2017-05-24T22:44:31+08:00</updated>
  <id>http://tech-home.github.io/</id>
  <author>
    <name><![CDATA[Gene]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Android Studio-使用java8特性]]></title>
    <link href="http://tech-home.github.io/blog/20170524/"/>
    <updated>2017-05-24T19:55:07+08:00</updated>
    <id>http://tech-home.github.io/blog/android-studio-shi-yong-java8te-xing</id>
    <content type="html"><![CDATA[<h2>以前</h2>

<p>我们的项目开始于去年，在那时候刚好java8出来，android原生对java8的支持并不是很理想，为了在项目中使用java8的Lambda表达式等特性，就得引入第三方库retrolambda。接着，在我们已有的项目配置对应的插件依赖：</p>

<p><img src="../../images/dependence.png" alt="image" /></p>

<p>引入retrolambda插件，</p>

<p><img src="../../images/plugn.png" alt="image" /></p>

<p>开启java 8的编译环境</p>

<p><img src="../../images/jdk8.png" alt="image" /></p>

<p>接下来就可以在我们的项目中愉快的使用java8中的Lambda表达式特性。</p>

<!--more-->


<h2>现在</h2>

<p>随着android studio2.4 preview4的发布，（截止到目前为止，android studio最新版本为 3.0 canary）宣布android studio原生支持java 8。使得我们开发者使用起来更加的简单，现在，我们只需在项目中配置如下即可：</p>

<p><img src="../../images/jdk8.png" alt="image" /></p>

<h2>使用java8特性</h2>

<p>当我们在开发一个android应用时，使用java8新特性是可选的，我们可以选择继续使用java7继续我们的项目，但是，你需要用jdk8来编译我们的代码。
如下图所示，android studio 通过一个叫做desugared的默认工具链，在javac编译过后，将字节码转一步转化，从而实现java8特性的支持。</p>

<p><img src="../../images/struct.png" alt="image" /></p>

<p>如何开启android studio 原生支持java8，我们已经在上面说过了，但是，有以下几点需要注意的。</p>

<ul>
<li><p>android studio版本，必须是2.4 preview或以上。</p></li>
<li><p>android plugin 必须是3.0.0-alphal或以上。</p></li>
</ul>


<h2>android studio 支持的java8特性与api</h2>

<p>android studio 不完全支持java8特性，但是相信在接下来的android studio版本，会有越来越多的特性被as所支持，但是目前来说，我们需要根据项目所配置的minsdversion版本以及下面的表格，来确认对应的api或特性在我们的项目中目前是否可以使用。</p>

<p><strong>目前android studio 所支持的java8 语言特性：</strong></p>

<table border="1">
<tr>
<th>java8语言特性</th>
<th>适合的minSdkVersion</th>
</tr>
<tr>
<td>lambada 表达式</td>
<td>所有 但是lambada序列化只支持lambada所捕获的值都是可序列化的。</td>
</tr>
<tr>
<td>方法引用</td>
<td>所有</td>
</tr>
<tr>
<td>类型注解</td>
<td>所有  但是  类型注解只适用于编译时，不支持运行时，同理，as支持所有Type在api24或以下，除了ElementType.TYPE_USE or 
ElementType.TYPE_PARAMETER.</td>
</tr>
<tr>
<td>默认和静态接口方法</td>
<td>所有</td>
</tr>
<tr>
<td>重复注解</td>
<td>所有</td>
</tr>
<tr>
<td>方法引用</td>
<td>所有</td>
</tr>
</table>


<p><br></p>

<p><strong>目前android studio 所支持的java8 api</strong></p>

<table border="1">
<tr>
<th>java8 api</th>
<th>适合的minSdkVersion</th>
</tr>
<tr>
<td>java.lang.annotation.Repeatable</td>
<td>API level 24 or higher.</td>
</tr>
<tr>
<td>AnnotatedElement.getAnnotationsByType(Class)</td>
<td>API level 24 or higher.</td>
</tr>
<tr>
<td>java.util.stream</td>
<td>API level 24 or higher.</td>
</tr>
<tr>
<td>java.lang.FunctionalInterface</td>
<td>API level 24 or higher.</td>
</tr>
<tr>
<td>java.lang.reflect.Method.isDefault()</td>
<td>API level 24 or higher.</td>
</tr>
<tr>
<td>java.util.function</td>
<td>API level 24 or higher.</td>
</tr>
</table>


<p><br></p>

<h3>迁移到android studio 原生默认工具链</h3>

<p>如果android studio 检测到你的项目使用了jack、retrolambda、或者dexguard，那么as将优先使用这些工具提供的支持java8的解决方案，而不会使用原生的默认工具链进行字节码转换。相对于使用as默认的工具链，以上所说的几种方案缺少部分功能的支持，所以，接下来我们要说下如果从这些第三方库中移植到as默认工具链上来，毕竟，这玩意是google亲生的娃，相信对于前几种方法，后者会得到更好的支持。</p>

<h3>从jack迁移</h3>

<p>jack工具链已经被废弃掉了，接下来我们也不会使用到它，如上所述，为了是我们的项目使用as自带的java8特性，我们需要先禁用掉jack，禁用jack的方法很简单，只需要在你module下的build.gradle文件，找到以下这段代码，去掉即可。</p>

<pre><code> jackOptions {
        enabled true
        ...
    }
</code></pre>

<h3>从Retrolambda迁移</h3>

<p>相对于android studio 的默认工具链，Retrolambda缺少那些使用java8 语言特性的第三方库的支持。从Retrolambda迁移过来，需要找到你项目根目录下的build.gradle文件，找到以下代码并注释掉
     classpath &lsquo;me.tatarka:gradle-retrolambda:<version_number>&rsquo;
接着找到你module下的build.gradle文件，把下面这段代码去掉即可。</p>

<pre><code>// 去掉插件的使用
apply plugin: 'me.tatarka.retrolambda'
...
// Remove this block after migrating useful configurations.
retrolambda {
...
// If you have arguments for the Java VM you want to keep,
// move them to your project's gradle.properties file.
jvmArgs '-Xmx2048m'
}
</code></pre>

<h3>禁用java8特性</h3>

<p>如果你实在不想在自个的项目中使用java8特性，你可以通过一下方法禁用它。
找到项目中的gradle.properties 文件，添加下面这段代码：</p>

<pre><code>android.enableDesugar=false
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Android系统Bar控制]]></title>
    <link href="http://tech-home.github.io/blog/20170519/"/>
    <updated>2017-05-19T21:19:54+08:00</updated>
    <id>http://tech-home.github.io/blog/androidxi-tong-barkong-zhi</id>
    <content type="html"><![CDATA[<h4>系统状态栏和导航栏控制</h4>

<h5>隐藏状态栏、导航栏详情</h5>

<p>如果使用这种方法，内容大小本身并不会发生变化，只是系统状态栏下的图标会隐藏掉，只要用户点击了屏幕上的状态栏或者导航栏，两者都会变成完全显示出来。使用这种方法的优势在于状态栏跟导航栏是存在的，只是把其内容隐藏了起来。在不用牺牲状态栏跟导航栏入口的情况下，创建出体验更好的沉浸式应用。</p>

<pre><code>    View decordView = getWindow().getDecorView();
    int option = View.SYSTEM_UI_FLAG_LOW_PROFILE;
    decordView.setSystemUiVisibility(option);
</code></pre>

<!--more-->


<p><em>注：decordView只是作为一个样例，事实上你可以使用任何的可见视图。</em></p>

<p>默认的布局样式效果如下：</p>

<p><img src="../../images/device-2017-05-19-193016.png" alt="设备ppi" /></p>

<p>隐藏状态栏、导航栏详情后的效果如下：</p>

<p><img src="../../images/device-2017-05-19-192855.png" alt="设备ppi" /></p>

<p>setSystemUiVisibility 方法接收以下参数：</p>

<ul>
<li>SYSTEM_UI_FLAG_LOW_PROFILE                设置导航栏详情隐藏</li>
<li>SYSTEM_UI_FLAG_LAYOUT_STABLE              设置布局内容固定，不随着状态栏伸缩进行变化</li>
<li>SYSTEM_UI_FLAG_FULLSCREEN                 设置全屏，隐藏系统状态栏，导航栏。</li>
<li>SYSTEM_UI_FLAG_LAYOUT_FULLSCREEN          设置全屏，布局充满整个界面，但不隐藏状态栏、导栏等。</li>
<li>SYSTEM_UI_FLAG_HIDE_NAVIGATION            设置隐藏系统导航栏</li>
<li>SYSTEM_UI_FLAG_LAYOUT_HIDE_NAVIGATION     不隐藏导航栏，布局内容填满导航栏部分，会出现折叠。</li>
<li>SYSTEM_UI_FLAG_IMMERSIVE_STICKY           设置粘性沉浸式样式</li>
<li>SYSTEM_UI_FLAG_IMMERSIVE                  设置成沉浸式样式</li>
</ul>


<p>第一个我们上面已经详细介绍过，接下来看看下面的三个对应的作用及效果</p>

<h5>设置全屏</h5>

<p>使用这个方法会重新调整内容布局的大小，同时隐藏起系统状态栏和导航栏</p>

<pre><code>  View decordView = getWindow().getDecorView();
  int option = View.SYSTEM_UI_FLAG_FULLSCREEN;
  decordView.setSystemUiVisibility(option);
</code></pre>

<h5>设置导航栏隐藏</h5>

<p>使用这个方法会重新调整内容布局的大小，同时隐藏起系统导航栏</p>

<pre><code>  View decordView = getWindow().getDecorView();
  int option = View.SYSTEM_UI_FLAG_HIDE_NAVIGATION;
  decordView.setSystemUiVisibility(option);SYSTEM_UI_FLAG_HIDE_NAVIGATION
</code></pre>

<p>如果你想通过代码清除以上设置，恢复成系统原来的样子，可以同通过传入0清空之前所设置的标识，具体代码如下：</p>

<pre><code>  View decordView = getWindow().getDecorView();
  decordView.setSystemUiVisibility(0);
</code></pre>

<p>这样系统状态栏跟导航栏又会恢复到默认的样式。</p>

<h5>设置沉浸式样式</h5>

<p><img src="../../images/%E6%B2%89%E6%B5%B8%E5%BC%8F%E6%A0%B7%E5%BC%8F.png" alt="设备ppi" /></p>

<p>取消当前设置，恢复系统原来的样子：</p>

<p><img src="../../images/%E5%8F%96%E6%B6%88%E6%B2%89%E6%B5%B8%E5%BC%8F%E6%A0%B7%E5%BC%8F.png" alt="设备ppi" /></p>

<h5>设置粘性沉浸式样式</h5>

<p><img src="../../images/%E7%B2%98%E6%80%A7%E6%B2%89%E6%B5%B8%E5%BC%8F.png" alt="设备ppi" /></p>

<p>如果想监听系统bar状态转化的过程，可以通过注册setOnSystemUiVisibilityChangeListener()
<img src="../../images/listener.png" alt="设备ppi" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Android Databing 初探]]></title>
    <link href="http://tech-home.github.io/blog/20170510/"/>
    <updated>2017-05-10T23:32:42+08:00</updated>
    <id>http://tech-home.github.io/blog/android-databing-chu-tan</id>
    <content type="html"><![CDATA[<h2>简介</h2>

<p>Databing是2015年Google IO大会带来的一门Data Binding技术，使用它可以很方便的从传统mvc框架切换到MVVM。Databing解决了我们android开发人员长期以来面对的数据与ui展示相关联的问题，想想我们以前所写的一大堆findviewbyid，很多时候都是在重复一样的代码。当然，除了databing还有其他的第三方框架也能解决这些问题，本文主要介绍一下如何在我们的项目中使用Databing技术。</p>

<!--more-->


<h2>准备</h2>

<h3>Android Studio 版本</h3>

<p><img src="../../images/version.png" alt="设备ppi" /></p>

<h3>gradle 版本</h3>

<p><img src="../../images/gradle.png" alt="设备ppi" /><br/>
开启data bing 模块，修改对应的build.gradle文件，在android{}下添加以下代码:
<img src="../../images/start.png" alt="设备ppi" /></p>

<h2>开始</h2>

<h3>声明节点</h3>

<p>使用data bing之前我们的布局文件是这样的，它的根节点是一个viewgroup。</p>

<p><img src="../../images/before.png" alt="设备ppi" /><br/>
使用之后变成这样
<img src="../../images/after.png" alt="设备ppi" /><br/>
布局文件的根节点变成了layout，而且多一个data的节点，在data中声明一个variable标签，这个变量就是我们java代码实现与xml布局文件绑定的基础，格式如下：</p>

<p><code>&lt;variable name="变量名称" type="完整类名称" /&gt;</code></p>

<h3>定义对象实体</h3>

<p>添加一个java bean account类，主要保存用户登录输入的信息，
<img src="../../images/account.png" alt="设备ppi" /><br/>
随后将我们的布局文件更改为：
<img src="../../images/final.png" alt="设备ppi" /></p>

<p>除了这样引入我们的bean对象外，我们还可以像java类导入一样导入我们所需要的实体，</p>

<p><img src="../../images/dataimport.png" alt="设备ppi" /></p>

<p>另外，在导入包的同时我们还可以对其设置别名，这样可以避免有两个名称一样的实体对象时，引入出现问题，</p>

<blockquote><p><strong><em>注意</em></strong></p>

<ul>
<li><p>java.lang.*包下的类会自动被导入，所以我们使用的使用不需要指明完整的类名称，可以直接使用。</p></li>
<li><p>data下面的variable变量，可以有多个。</p></li>
</ul>
</blockquote>

<h3>数据绑定</h3>

<p>回到我们loginactivity类，修改我们原有的oncreate方法，用DatabindingUtil.setContentView()来替换掉 setContentView()，创建一个 account 对象，通过binding.setUser(account) 实现绑定。</p>

<h3>数据使用</h3>

<p>xml布局文件使用变量的方式：</p>

<p><img src="../../images/username.png" alt="设备ppi" /></p>

<p>xml 的 UI 元素就可以直接使用我们在activity创建的account对象</p>

<h2>其他</h2>

<h3>使用类中的静态方法</h3>

<p>添加一个简单的把名字转为大写的方法
<img src="../../images/upper.png" alt="设备ppi" /><br/>
在xml布局文件中使用
<img src="../../images/use.png" alt="设备ppi" /></p>

<h3>Null Coalescing 运算符</h3>

<p><img src="../../images/ifnull.png" alt="设备ppi" /><br/>
等价于：
<img src="../../images/ifnull2.png" alt="设备ppi" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Android UI设计概述]]></title>
    <link href="http://tech-home.github.io/blog/20170202/"/>
    <updated>2017-02-02T01:27:21+08:00</updated>
    <id>http://tech-home.github.io/blog/android-uishe-ji-gai-shu</id>
    <content type="html"><![CDATA[<h2>基本概念</h2>

<ol>
<li>ppi（pixels per inch）：屏幕每英寸所包含的像素，ppi数值越高，显示屏幕越细腻。</li>
<li>dpi（dots per inch）：每英寸多少点，dpi数值越高，图片越细腻。</li>
<li>px（    pixel像素）：屏幕像素,组成图片的基本单位。</li>
<li>sp：字体大小单位，当在屏幕ppi＝160，字体大小为100%时，1sp＝1px，换算公式：<strong>sp*ppi/160=px</strong>。</li>
<li>dp：元素长度单位，当在屏幕ppi＝160，1dp＝1px，换算公式：<strong>dp*ppi/160=px</strong>。</li>
</ol>


<!--more-->


<h2>界面基本元素</h2>

<p>我们选取720 * 1080这一尺寸为标准，在这尺寸下这些基本元素的大小。<br/>
状态栏高度：50px。 <br/>
导航栏高度：96px。 <br/>
菜单栏高度：96px。<br/>
启动图标：48 * 48dp。 <br/>
操作栏图标：32 * 32dp 图标大小为24 * 24dp 切图尺寸为32 * 32dp。<br/>
小图标：16 * 16dp 图标大小为12 * 12dp 切图尺寸为16 * 16dp。</p>

<h2>不同屏幕适配</h2>

<p><img src="../../images/dp.png" alt="设备ppi" /> <br/>
在mdpi的设备上，1dp＝1px，以mdpi为标准，不同屏幕的密度值比为：ldpi : mdpi : hdpi : xhdpi : xxhdpi = 0.75 : 1 : 1.5 : 2 : 3，UI作图时为了兼顾ios端，一般都会以ios6（750 ＊ 1334）为基础作图。编程实现时，会在其基础上除2，等到最终转化后的dp值。 <br/>
<strong>除去低分辨率的屏幕（120dpi），所有元素都必须是可以被4整除的元件，在android界面中最小的间距为8dp</strong>。</p>

<h2>常用尺寸</h2>

<p>. 最小可点击区域的尺寸是48dp。 <br/>
. 默认list的高度为48dp。 <br/>
. 两个元素的最小间距为8dp。 <br/>
. button的默认高度为40dp。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[几个常用的ADB命令]]></title>
    <link href="http://tech-home.github.io/blog/20170130/"/>
    <updated>2017-01-30T02:06:09+08:00</updated>
    <id>http://tech-home.github.io/blog/ji-ge-chang-yong-de-adbming-ling</id>
    <content type="html"><![CDATA[<p>  ADB全称Android Debug Bridge,在android开发中基本算得上是家喻户晓，我们经常会使用这个sdk中的工具来管理我们连接到电脑上的android设备。熟悉、掌握一些基本的adb命令，不仅可以提高我们的逼格，还可以提升我们的开发效率，在这，我总结一下本人在开发中会用到的一些adb命令。</p>

<!--more-->


<h4>查看连接设备</h4>

<blockquote><p><strong><em>adb devices</em></strong></p></blockquote>

<p>这个命令可以查看当前连接的所有android设备、包括模拟器。</p>

<h4>安装软件</h4>

<blockquote><p><strong><em>adb install -option path</em></strong> <br/>
* -r  保存数据缓存  <br/>
* -s  安装到sd卡</p></blockquote>

<p>将指定的apk文件安装到设备上</p>

<h4>卸载软件</h4>

<blockquote><p><strong><em>adb uninstall -option &lt; packagename ></em></strong> <br/>
* -k  保存配置和缓存文件</p></blockquote>

<p>根据指定包名，卸载设备上的软件。</p>

<h4>查看软件包名</h4>

<blockquote><p><strong><em>adb shell pm list packages -option</em></strong> <br/>
* -s  获取系统级别的软件包名  <br/>
* -3  获取非系统级别的第三方软件包名</p></blockquote>

<p>列出设备上已安装的程序包名。</p>

<h4>查看软件详情</h4>

<blockquote><p><strong><em>adb shell dumpsys package &lt; packagename ></em></strong></p></blockquote>

<p>根据指定包名，查看设备上某个包的具体信息。</p>

<h4>清除软件缓存</h4>

<blockquote><p><strong><em>adb shell pm clear &lt; packagename ></em></strong></p></blockquote>

<p>清空指定软件的应用缓存。</p>

<h4>获取设备序列号</h4>

<blockquote><p><strong><em>adb get-serialno</em></strong></p></blockquote>

<h4>获取屏幕分辨率</h4>

<blockquote><p><strong><em>adb shell wm size</em></strong></p></blockquote>

<h4>获取屏幕密度</h4>

<blockquote><p><strong><em>adb shell wm density</em></strong></p></blockquote>

<h4>查看当前打开activity的名字</h4>

<blockquote><p><strong><em>adb shell dumpsys activity | grep &ldquo;mFocusedActivity&rdquo;</em></strong></p></blockquote>

<h4>推送文件到设备</h4>

<blockquote><p><strong><em>adb push &lt;本地路径-电脑> &lt;远程路径－设备></em></strong></p></blockquote>

<h4>拉取设备上的文件</h4>

<blockquote><p><strong><em>adb pull &lt;远程路径> &lt;本地路径></em></strong></p></blockquote>

<h4>重启设备</h4>

<blockquote><p><strong><em>adb reboot [bootloader | recovery]</em></strong> <br/>
* null 什么都不加直接重启 <br/>
* bootloader 重启到bootloader引导模式 等同于：adb reboot-bootloader <br/>
* recovery 重启到recovery刷机模式</p></blockquote>
]]></content>
  </entry>
  
</feed>
